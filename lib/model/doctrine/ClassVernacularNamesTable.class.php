<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ClassVernacularNamesTable extends DarwinTable
{
  /**
  * Find vernacular names communities (joined with names)
  * for a given table and record id
  * @param string $table_name db table name
  * @param int $record_id id of the record
  * @return a Doctrine_collection of results
  */
  public function findForTable($table_name, $record_id)
  {
     $q = Doctrine_Query::create()
	 ->from('ClassVernacularNames cv')
	 ->leftJoin('cv.VernacularNames v')
	 ->orderBy('cv.community ASC, v.name_indexed');
     $q = $this->addCatalogueReferences($q, $table_name, $record_id, 'cv', true);
     return $q->execute();
  }

  /**
  * Get Distincts type of communities
  * @return array an Array of types in keys
  */
  public function getDistinctCommunities()
  {
    return $this->createDistinct('ClassVernacularNames', 'community', 'community')->execute();
  }

  public function findAllCommonNames($listId = null)
  {
    if($listId == null) return array() ;
     $q = Doctrine_Query::create()
	    ->from('ClassVernacularNames cv')
	    ->innerJoin('cv.VernacularNames v') 
      ->orderBy('cv.record_id');	 
    if(count($listId['taxonomy'])) $q->andWhere('referenced_relation=?','taxonomy')->andWhereIn('record_id',$listId['taxonomy']);
    if(count($listId['chronostratigraphy'])) $q->andWhere('referenced_relation=?','chronostratigraphy')->andWhereIn('record_id',$listId['chronostratigraphy']);
    if(count($listId['lithostratigraphy'])) $q->andWhere('referenced_relation=?',"lithostratigraphy")->andWhereIn('record_id',$listId['lithostratigraphy']) ;
    if(count($listId['lithology'])) $q->andWhere('referenced_relation=?',"lithology")->andWhereIn('record_id',$listId['lithology']);
    if(count($listId['mineralogy'])) $q->andWhere('referenced_relation=?',"mineralogy")->andWhereIn('record_id',$listId['mineralogy']) ;    
    $result = $q->execute();
    $tab = array('taxonomy'=> array(), 'chronostratigraphy' => array(), 'lithostratigraphy' => array(), 'lithology' => array(),'mineralogy' => array()) ;
    foreach($result as $key=>$vernacular)
    {
      if (!isset($tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]))
        $tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()] = array('community' => array(), 'name' => '') ;
      foreach($vernacular->VernacularNames as $name)
      {
        if ($tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['name'] != '')
          $tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['name'] .= ','.$name->getName() ;
        else
          $tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['name'] = $name->getName() ;
        if(!isset($tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['community'][$vernacular->getCommunity()]))
          $tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['community'][$vernacular->getCommunity()] = $name->getName() ;
        else
          $tab[$vernacular->getReferencedRelation()][$vernacular->getRecordId()]['community'][$vernacular->getCommunity()] .= ','.$name->getName() ;         
      }
    }    
    return $tab ;
	}
}
