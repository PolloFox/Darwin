<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SpecimenPartsTable extends DarwinTable
{
  /**
  * Get Distincts Buildings of Part
  * @return array an Array of types in keys
  */
  public function getDistinctBuildings()
  {
    return $this->createDistinct('SpecimenParts', 'building', 'buildings')->execute();
  }

  /**
  * Get Distincts Floor of Part
  * @return array an Array of types in keys
  */
  public function getDistinctFloors($building = null)
  {
    $q = $this->createDistinct('SpecimenParts', 'floor', 'floors');
	if(! is_null($building))
	  $q->addWhere('building = ?', $building);
	return $q->execute();
  }

  /**
  * Get Distincts Room of Part
  * @return array an Array of types in keys
  */
  public function getDistinctRooms($building = null, $floor = null)
  {
    $q = $this->createDistinct('SpecimenParts', 'room', 'rooms');
	if(! is_null($building))
	  $q->addWhere('building = ?', $building);

	if(! is_null($floor))
	  $q->addWhere('floor = ?', $floor);

	return $q->execute();
  }

  /**
  * Get Distincts Row of Part
  * @return array an Array of types in keys
  */
  public function getDistinctRows($building = null, $floor = null, $room = null)
  {
    $q = $this->createDistinct('SpecimenParts', 'row', 'rows');
	if(! is_null($building))
	  $q->addWhere('building = ?', $building);

	if(! is_null($floor))
	  $q->addWhere('floor = ?', $floor);

	if(! is_null($room))
	  $q->addWhere('room = ?', $room);

	return $q->execute();
  }

  /**
  * Get Distincts Shelve of Part
  * @return array an Array of types in keys
  */
  public function getDistinctShelfs($building = null, $floor = null, $room = null, $rows = null)
  {
    $q = $this->createDistinct('SpecimenParts', 'shelf', 'shelfs');
	if(! is_null($building))
	  $q->addWhere('building = ?', $building);

	if(! is_null($floor))
	  $q->addWhere('floor = ?', $floor);

	if(! is_null($room))
	  $q->addWhere('room = ?', $room);

	if(! is_null($rows))
	  $q->addWhere('row = ?', $rows);
	return $q->execute();
  }

  /**
  * Get Distincts Container of Part
  * @return array an Array of types in keys
  */
  public function getDistinctContainerTypes()
  {
    return $this->createDistinct('SpecimenParts', 'container_type', 'container_types')->execute();
  }

  /**
  * Get Distincts Sub Container of Part
  * @return array an Array of types in keys
  */
  public function getDistinctSubContainerTypes()
  {
    return $this->createDistinct('SpecimenParts', 'sub_container_type', 'sub_container_types')->execute();
  }

  /**
  * Get Distincts Sub Container of Part
  * @return array an Array of types in keys
  */
  public function getDistinctParts()
  {
	return $this->createDistinct('SpecimenParts', 'specimen_part', 'parts')->execute();
  }

  /**
  * Get Distincts status of Part
  * @return array an Array of types in keys
  */
  public function getDistinctStatus()
  {
	return $this->createDistinct('SpecimenParts', 'specimen_status', 'status')->execute();
  }

  /**
  * Get Distincts Container Storages of Part
  * filter by type if one given
  * @param string $type a type
  * @return array an Array of types in keys
  */
  public function getDistinctContainerStorages($type)
  {
	$q = $this->createDistinct('SpecimenParts INDEXBY storage', 'container_storage', 'storage','');
	if(! is_null($type))
	  $q->addWhere('container_type = ?', $type);

	$results = $q->fetchArray();
    if(count($results))
      $results = array_combine(array_keys($results),array_keys($results));

    return array_merge(array(''=>''), $results);
  }

  /**
  * Get Distincts Sub Container Storages of Part
  * filter by type if one given
  * @param string $type a type
  * @return array an Array of types in keys
  */
  public function getDistinctSubContainerStorages($type)
  {
	$q = $this->createDistinct('SpecimenParts INDEXBY storage', 'sub_container_storage', 'storage','');
	if(! is_null($type))
	  $q->addWhere('container_type = ?', $type);

	$results = $q->fetchArray();
    if(count($results))
      $results = array_combine(array_keys($results),array_keys($results));

    return array_merge(array(''=>''), $results);
  }

  /**
  * Get all parts for an individual with some details info
  * @param int $individual Id of the individual
  * @return Doctrine_Collection of parts
  */
  public function findForIndividual($individual)
  {
	$q = Doctrine_Query::create()
		  ->from('SpecimenParts p')
		  ->andWhere('p.specimen_individual_ref = ?',$individual)
		  ->orderBy('p.specimen_part ASC, p.room ASC, p.row ASC, p.shelf ASC');
	return $q->execute();
  }

}