<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class BaseCatalogueProperties extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('catalogue_properties');
        $this->hasColumn('id', 'integer', null, array('type' => 'integer', 'primary' => true, 'autoincrement' => true));
        $this->hasColumn('table_name', 'string', null, array('type' => 'string', 'notnull' => true));
        $this->hasColumn('record_id', 'integer', null, array('type' => 'integer', 'notnull' => true));
        $this->hasColumn('property_type', 'string', null, array('type' => 'string', 'notnull' => true));
        $this->hasColumn('property_sub_type', 'string', null, array('type' => 'string'));
        $this->hasColumn('property_sub_type_indexed', 'string', null, array('type' => 'string'));
        $this->hasColumn('property_qualifier', 'string', null, array('type' => 'string'));
        $this->hasColumn('property_qualifier_indexed', 'string', null, array('type' => 'string'));
        $this->hasColumn('date_from_mask', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => 0));
        $this->hasColumn('date_from timestamp', 'timestamp', null, array('type' => 'timestamp', 'notnull' => true, 'default' => '0001-01-01'));
        $this->hasColumn('date_to_mask', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => 0));
        $this->hasColumn('date_to timestamp', 'timestamp', null, array('type' => 'timestamp', 'notnull' => true, 'default' => '0001-01-01'));
        $this->hasColumn('property_unit', 'string', null, array('type' => 'string', 'notnull' => true));
        $this->hasColumn('property_accuracy_unit', 'string', null, array('type' => 'string'));
        $this->hasColumn('property_method', 'string', null, array('type' => 'string'));
        $this->hasColumn('property_method_indexed', 'string', null, array('type' => 'string'));
        $this->hasColumn('property_tool', 'string', null, array('type' => 'string', 'notnull' => true));
        $this->hasColumn('property_tool_indexed', 'string', null, array('type' => 'string'));
    }

    public function setUp()
    {
        $this->hasMany('PropertiesValues', array('local' => 'id',
                                                 'foreign' => 'property_ref'));
    }
}