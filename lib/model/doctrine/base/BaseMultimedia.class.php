<?php

/**
 * BaseMultimedia
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property boolean $is_digital
 * @property string $type
 * @property string $sub_type
 * @property string $title
 * @property string $title_indexed
 * @property string $subject
 * @property string $coverage
 * @property string $apercu_path
 * @property string $copyright
 * @property string $license
 * @property string $uri
 * @property string $descriptive_ts
 * @property string $descriptive_language_full_text
 * @property string $creation_date
 * @property integer $creation_date_mask
 * @property string $publication_date_from
 * @property integer $publication_date_from_mask
 * @property string $publication_date_to
 * @property integer $publication_date_to_mask
 * @property integer $parent_ref
 * @property string $path
 * @property string $mime_type
 * @property Multimedia $Parent
 * @property Doctrine_Collection $Multimedia
 * @property Doctrine_Collection $PeopleMultimedia
 * @property Doctrine_Collection $UsersMultimedia
 * @property Doctrine_Collection $MyWidgets
 * @property Doctrine_Collection $MultimediaKeywords
 * @property Doctrine_Collection $AssociatedMultimedia
 * 
 * @method integer             getId()                             Returns the current record's "id" value
 * @method boolean             getIsDigital()                      Returns the current record's "is_digital" value
 * @method string              getType()                           Returns the current record's "type" value
 * @method string              getSubType()                        Returns the current record's "sub_type" value
 * @method string              getTitle()                          Returns the current record's "title" value
 * @method string              getTitleIndexed()                   Returns the current record's "title_indexed" value
 * @method string              getSubject()                        Returns the current record's "subject" value
 * @method string              getCoverage()                       Returns the current record's "coverage" value
 * @method string              getApercuPath()                     Returns the current record's "apercu_path" value
 * @method string              getCopyright()                      Returns the current record's "copyright" value
 * @method string              getLicense()                        Returns the current record's "license" value
 * @method string              getUri()                            Returns the current record's "uri" value
 * @method string              getDescriptiveTs()                  Returns the current record's "descriptive_ts" value
 * @method string              getDescriptiveLanguageFullText()    Returns the current record's "descriptive_language_full_text" value
 * @method string              getCreationDate()                   Returns the current record's "creation_date" value
 * @method integer             getCreationDateMask()               Returns the current record's "creation_date_mask" value
 * @method string              getPublicationDateFrom()            Returns the current record's "publication_date_from" value
 * @method integer             getPublicationDateFromMask()        Returns the current record's "publication_date_from_mask" value
 * @method string              getPublicationDateTo()              Returns the current record's "publication_date_to" value
 * @method integer             getPublicationDateToMask()          Returns the current record's "publication_date_to_mask" value
 * @method integer             getParentRef()                      Returns the current record's "parent_ref" value
 * @method string              getPath()                           Returns the current record's "path" value
 * @method string              getMimeType()                       Returns the current record's "mime_type" value
 * @method Multimedia          getParent()                         Returns the current record's "Parent" value
 * @method Doctrine_Collection getMultimedia()                     Returns the current record's "Multimedia" collection
 * @method Doctrine_Collection getPeopleMultimedia()               Returns the current record's "PeopleMultimedia" collection
 * @method Doctrine_Collection getUsersMultimedia()                Returns the current record's "UsersMultimedia" collection
 * @method Doctrine_Collection getMyWidgets()                  Returns the current record's "MyWidgets" collection
 * @method Doctrine_Collection getMultimediaKeywords()             Returns the current record's "MultimediaKeywords" collection
 * @method Doctrine_Collection getAssociatedMultimedia()           Returns the current record's "AssociatedMultimedia" collection
 * @method Multimedia          setId()                             Sets the current record's "id" value
 * @method Multimedia          setIsDigital()                      Sets the current record's "is_digital" value
 * @method Multimedia          setType()                           Sets the current record's "type" value
 * @method Multimedia          setSubType()                        Sets the current record's "sub_type" value
 * @method Multimedia          setTitle()                          Sets the current record's "title" value
 * @method Multimedia          setTitleIndexed()                   Sets the current record's "title_indexed" value
 * @method Multimedia          setSubject()                        Sets the current record's "subject" value
 * @method Multimedia          setCoverage()                       Sets the current record's "coverage" value
 * @method Multimedia          setApercuPath()                     Sets the current record's "apercu_path" value
 * @method Multimedia          setCopyright()                      Sets the current record's "copyright" value
 * @method Multimedia          setLicense()                        Sets the current record's "license" value
 * @method Multimedia          setUri()                            Sets the current record's "uri" value
 * @method Multimedia          setDescriptiveTs()                  Sets the current record's "descriptive_ts" value
 * @method Multimedia          setDescriptiveLanguageFullText()    Sets the current record's "descriptive_language_full_text" value
 * @method Multimedia          setCreationDate()                   Sets the current record's "creation_date" value
 * @method Multimedia          setCreationDateMask()               Sets the current record's "creation_date_mask" value
 * @method Multimedia          setPublicationDateFrom()            Sets the current record's "publication_date_from" value
 * @method Multimedia          setPublicationDateFromMask()        Sets the current record's "publication_date_from_mask" value
 * @method Multimedia          setPublicationDateTo()              Sets the current record's "publication_date_to" value
 * @method Multimedia          setPublicationDateToMask()          Sets the current record's "publication_date_to_mask" value
 * @method Multimedia          setParentRef()                      Sets the current record's "parent_ref" value
 * @method Multimedia          setPath()                           Sets the current record's "path" value
 * @method Multimedia          setMimeType()                       Sets the current record's "mime_type" value
 * @method Multimedia          setParent()                         Sets the current record's "Parent" value
 * @method Multimedia          setMultimedia()                     Sets the current record's "Multimedia" collection
 * @method Multimedia          setPeopleMultimedia()               Sets the current record's "PeopleMultimedia" collection
 * @method Multimedia          setUsersMultimedia()                Sets the current record's "UsersMultimedia" collection
 * @method Multimedia          setMyWidgets()                  Sets the current record's "MyWidgets" collection
 * @method Multimedia          setMultimediaKeywords()             Sets the current record's "MultimediaKeywords" collection
 * @method Multimedia          setAssociatedMultimedia()           Sets the current record's "AssociatedMultimedia" collection
 * 
 * @package    darwin
 * @subpackage model
 * @author     DB team <collections@naturalsciences.be>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMultimedia extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('multimedia');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('is_digital', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             ));
        $this->hasColumn('type', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'image',
             ));
        $this->hasColumn('sub_type', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('title', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('title_indexed', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('subject', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '/',
             ));
        $this->hasColumn('coverage', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'temporal',
             ));
        $this->hasColumn('apercu_path', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('copyright', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('license', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('uri', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('descriptive_ts', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('descriptive_language_full_text', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('creation_date', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '0001-01-01',
             ));
        $this->hasColumn('creation_date_mask', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('publication_date_from', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '0001-01-01',
             ));
        $this->hasColumn('publication_date_from_mask', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('publication_date_to', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '0001-01-01',
             ));
        $this->hasColumn('publication_date_to_mask', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('parent_ref', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('path', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '/',
             ));
        $this->hasColumn('mime_type', 'string', null, array(
             'type' => 'string',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Multimedia as Parent', array(
             'local' => 'parent_ref',
             'foreign' => 'id'));

        $this->hasMany('Multimedia', array(
             'local' => 'id',
             'foreign' => 'parent_ref'));

        $this->hasMany('PeopleMultimedia', array(
             'local' => 'id',
             'foreign' => 'object_ref'));

        $this->hasMany('UsersMultimedia', array(
             'local' => 'id',
             'foreign' => 'object_ref'));

        $this->hasMany('MyWidgets', array(
             'local' => 'id',
             'foreign' => 'icon_ref'));

        $this->hasMany('MultimediaKeywords', array(
             'local' => 'id',
             'foreign' => 'object_ref'));

        $this->hasMany('AssociatedMultimedia', array(
             'local' => 'id',
             'foreign' => 'multimedia_ref'));
    }
}