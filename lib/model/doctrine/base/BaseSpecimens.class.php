<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class BaseSpecimens extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('specimens');
        $this->hasColumn('id', 'integer', null, array('type' => 'integer', 'primary' => true));
        $this->hasColumn('collection_ref', 'integer', null, array('type' => 'integer', 'notnull' => true));
        $this->hasColumn('expedition_ref', 'integer', null, array('type' => 'integer'));
        $this->hasColumn('gtu_ref', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => 0));
        $this->hasColumn('taxon_ref', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => 0));
        $this->hasColumn('litho_ref', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => 0));
        $this->hasColumn('chrono_ref', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => 0));
        $this->hasColumn('lithology_ref', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => 0));
        $this->hasColumn('mineral_ref', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => 0));
        $this->hasColumn('identification_qual', 'string', null, array('type' => 'string'));
        $this->hasColumn('sp', 'string', null, array('type' => 'string'));
        $this->hasColumn('identification_taxon_ref', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => 0));
        $this->hasColumn('host_taxon_ref', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => 0));
        $this->hasColumn('host_specimen_ref', 'integer', null, array('type' => 'integer'));
        $this->hasColumn('host_relationship', 'string', null, array('type' => 'string'));
        $this->hasColumn('acquisition_category', 'string', null, array('type' => 'string', 'notnull' => true, 'default' => 'expedition'));
        $this->hasColumn('acquisition_date_mask', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => 0));
        $this->hasColumn('acquisition_date', 'date', null, array('type' => 'date', 'notnull' => true, 'default' => '01/01/4713BC'));
        $this->hasColumn('collecting_method', 'string', null, array('type' => 'string'));
        $this->hasColumn('collecting_tool', 'string', null, array('type' => 'string'));
        $this->hasColumn('specimen_count_min', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => '1'));
        $this->hasColumn('specimen_count_max', 'integer', null, array('type' => 'integer', 'notnull' => true, 'default' => '1'));
        $this->hasColumn('station_visible', 'boolean', null, array('type' => 'boolean', 'notnull' => true, 'default' => true));
        $this->hasColumn('multimedia_visible', 'boolean', null, array('type' => 'boolean', 'notnull' => true, 'default' => true));
        $this->hasColumn('category', 'string', null, array('type' => 'string', 'notnull' => true, 'default' => 'physical'));
    }

    public function setUp()
    {
        $this->hasOne('Collections', array('local' => 'collection_ref',
                                           'foreign' => 'id'));

        $this->hasOne('Expeditions', array('local' => 'expedition_ref',
                                           'foreign' => 'id'));

        $this->hasOne('Taxonomy', array('local' => 'taxon_ref',
                                        'foreign' => 'id'));

        $this->hasOne('Lithostratigraphy', array('local' => 'litho_ref',
                                                 'foreign' => 'id'));

        $this->hasOne('Chronostratigraphy', array('local' => 'chrono_ref',
                                                  'foreign' => 'id'));

        $this->hasOne('Lithology', array('local' => 'lithology_ref',
                                         'foreign' => 'id'));

        $this->hasOne('Mineralogy', array('local' => 'mineral_ref',
                                          'foreign' => 'id'));

        $this->hasOne('Taxonomy as IdentificationsTaxon', array('local' => 'identification_taxon_ref',
                                                                'foreign' => 'id'));

        $this->hasOne('Taxonomy as HostTaxon', array('local' => 'host_taxon_ref',
                                                     'foreign' => 'id'));

        $this->hasOne('Specimens as HostSpecimen', array('local' => 'host_specimen_ref',
                                                         'foreign' => 'id'));

        $this->hasMany('Specimens', array('local' => 'id',
                                          'foreign' => 'host_specimen_ref'));

        $this->hasMany('SpecimenIndividuals', array('local' => 'id',
                                                    'foreign' => 'specimen_ref'));

        $this->hasMany('SpecimensAccompanying', array('local' => 'id',
                                                      'foreign' => 'specimen_ref'));
    }
}